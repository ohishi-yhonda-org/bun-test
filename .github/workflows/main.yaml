name: CI

on:
  # push:
  #   branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: [self-hosted, Windows, X64,test]
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT || '1433' }}
      DATABASE: ${{ secrets.DATABASE }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Verify Node.js and npm
        run: |
          Write-Output "Node.js version: $(node --version)"
          Write-Output "npm version: $(npm --version)"
        shell: powershell
        
      - name: list files
        run: Get-ChildItem
        shell: powershell
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
        continue-on-error: true
        
      - name: Verify Bun installation
        run: |
          try {
            # Bunが利用可能かテスト
            $bunVersion = bun --version 2>$null
            if ($LASTEXITCODE -eq 0) {
              Write-Output "✓ Bun is available, version: $bunVersion"
              Write-Output "BUN_AVAILABLE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            } else {
              throw "Bun command failed"
            }
          } catch {
            Write-Output "⚠️ Bun not available or failed to execute: $_"
            Write-Output "This may be due to permission issues with symlink creation on self-hosted runner"
            Write-Output "Will use npm for all operations"
            Write-Output "BUN_AVAILABLE=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        shell: powershell
        
      - name: Clean previous installations (if needed)
        run: |
          if (Test-Path "node_modules") {
            Write-Output "Removing existing node_modules..."
            Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "bun.lockb") {
            Write-Output "Removing existing bun.lockb..."
            Remove-Item "bun.lockb" -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "package-lock.json") {
            Write-Output "Removing existing package-lock.json..."
            Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
          }
        shell: powershell
        
      - name: Install dependencies
        run: |
          if ($env:BUN_AVAILABLE -eq "true") {
            Write-Output "Installing dependencies with Bun..."
            try {
              bun install
              if ($LASTEXITCODE -ne 0) {
                throw "Bun install failed with exit code $LASTEXITCODE"
              }
              Write-Output "✓ Dependencies installed successfully with Bun"
            } catch {
              Write-Output "❌ Bun install failed: $_"
              Write-Output "Falling back to npm..."
              npm install --verbose
            }
          } else {
            Write-Output "Installing dependencies with npm..."
            Write-Output "Using npm with --legacy-peer-deps to resolve dependency conflicts..."
            npm install --legacy-peer-deps --verbose
          }
        shell: powershell
        
      - name: Verify environment variables
        run: |
          Write-Output "Checking environment variables for Prisma..."
          if ($env:DB_USERNAME) {
            Write-Output "✓ DB_USERNAME is set"
          } else {
            Write-Output "⚠️ DB_USERNAME is not set"
          }
          if ($env:DB_HOST) {
            Write-Output "✓ DB_HOST is set"
          } else {
            Write-Output "⚠️ DB_HOST is not set"
          }
          if ($env:DATABASE) {
            Write-Output "✓ DATABASE is set"
          } else {
            Write-Output "⚠️ DATABASE is not set"
          }
          if ($env:DATABASE_URL) {
            Write-Output "✓ DATABASE_URL is set"
          } else {
            Write-Output "⚠️ DATABASE_URL is not set"
          }
        shell: powershell
        
      - name: generate Prisma client
        run: |
          # DATABASE_URLが設定されていない場合は動的に生成
          if (-not $env:DATABASE_URL -and $env:DB_USERNAME -and $env:DB_PASSWORD -and $env:DB_HOST -and $env:DATABASE) {
            $encodedDatabase = [System.Web.HttpUtility]::UrlEncode($env:DATABASE)
            $dynamicDatabaseUrl = "sqlserver://$($env:DB_USERNAME):$($env:DB_PASSWORD)@$($env:DB_HOST):$($env:DB_PORT)/$encodedDatabase?schema=dbo"
            Write-Output "Generated DATABASE_URL dynamically"
            $env:DATABASE_URL = $dynamicDatabaseUrl
          }
          
          if ($env:BUN_AVAILABLE -eq "true") {
            Write-Output "Generating Prisma client with Bun..."
            try {
              bun run prisma generate
              if ($LASTEXITCODE -ne 0) {
                throw "Bun prisma generate failed with exit code $LASTEXITCODE"
              }
              Write-Output "✓ Prisma client generated successfully with Bun"
            } catch {
              Write-Output "❌ Bun prisma generate failed: $_"
              Write-Output "Falling back to npm..."
              npx prisma generate
            }
          } else {
            Write-Output "Generating Prisma client with npm..."
            npx prisma generate
          }
        shell: powershell
        
      - name: Build project (if available)
        run: |
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          if ($packageJson.scripts.build) {
            if ($env:BUN_AVAILABLE -eq "true") {
              Write-Output "Building with Bun..."
              try {
                bun run build
                if ($LASTEXITCODE -ne 0) {
                  throw "Bun build failed with exit code $LASTEXITCODE"
                }
                Write-Output "✓ Build completed successfully with Bun"
              } catch {
                Write-Output "❌ Bun build failed: $_"
                Write-Output "Falling back to npm..."
                npm run build
              }
            } else {
              Write-Output "Building with npm..."
              npm run build
            }
          } else {
            Write-Output "No build script found, skipping build"
          }
        shell: powershell
        
      - name: Verify build output
        run: |
          Write-Output "Checking build output..."
          Write-Output "Current directory: $(Get-Location)"
          Write-Output "Contents of current directory:"
          Get-ChildItem
          
          if (Test-Path "dist") {
            Write-Output "Contents of dist directory:"
            Get-ChildItem "dist" -Recurse
          } else {
            Write-Output "❌ dist directory not found"
          }
          
          if (Test-Path "dist/index.js") {
            $indexJsPath = Resolve-Path "dist/index.js"
            Write-Output "✓ dist/index.js found at: $indexJsPath"
            Write-Output "File size: $((Get-Item $indexJsPath).Length) bytes"
          } else {
            Write-Output "❌ dist/index.js not found"
          }
        shell: powershell 

      #pm2がインストールされているか確認
      - name: Verify pm2 installation
        run: |
          try {
            $pm2Version = pm2 --version 2>$null
            if ($LASTEXITCODE -eq 0) {
              Write-Output "✓ pm2 is available, version: $pm2Version"
              Write-Output "Current PM2 processes:"
              pm2 list
              
              # Bunインタープリターの確認
              if ($env:BUN_AVAILABLE -eq "true") {
                Write-Output "Testing Bun interpreter with PM2..."
                $testScript = "console.log('Bun test successful')"
                $testScript | Out-File -FilePath "test-bun.js" -Encoding utf8
                pm2 start test-bun.js --name "bun-test" --interpreter bun
                Start-Sleep -Seconds 3
                pm2 logs bun-test --lines 5 --nostream
                pm2 delete bun-test 2>$null
                Remove-Item "test-bun.js" -Force -ErrorAction SilentlyContinue
              }
            } else {
              throw "pm2 command failed"
            }
          } catch {
            Write-Output "⚠️ pm2 not available or failed to execute: $_"
          }
        shell: powershell
      - name: Start application with pm2
        run: |
          if (Test-Path "dist/index.js") {
            $absoluteIndexPath = Resolve-Path "dist/index.js"
            Write-Output "Deploying application with pm2..."
            Write-Output "Using absolute path: $absoluteIndexPath"
            
            # PM2がサービスとして実行されている場合の対処
            $pm2Service = Get-Service -Name "pm2.exe" -ErrorAction SilentlyContinue
            if ($pm2Service -and $pm2Service.Status -eq "Running") {
              Write-Output "⚠️ PM2 is running as Windows Service - this may cause issues with Bun integration"
              Write-Output "Attempting to work around service limitations..."
              
              # サービス環境でのBun実行のための追加設定
              $env:PM2_SERVICE_MODE = "true"
              $env:PM2_LOG_LEVEL = "info"
            }
            
            # 既存のプロセスが存在するかチェック（複数の方法で確認）
            $processExists = $false
            try {
              # 方法1: pm2 jlist でチェック
              $processList = pm2 jlist | ConvertFrom-Json
              $existingProcess = $processList | Where-Object { $_.name -eq "bun-test-app" }
              if ($existingProcess) {
                $processExists = $true
                Write-Output "Existing process found via jlist. Current status: $($existingProcess.pm2_env.status)"
              }
            } catch {
              Write-Output "Could not check processes via jlist, trying alternative method..."
              
              # 方法2: pm2 show でチェック
              try {
                pm2 show bun-test-app 2>$null
                if ($LASTEXITCODE -eq 0) {
                  $processExists = $true
                  Write-Output "Existing process found via show command"
                }
              } catch {
                Write-Output "No existing process found via show command"
              }
            }
            
            if ($processExists) {
              Write-Output "Performing zero-downtime reload..."
              pm2 reload bun-test-app
              if ($LASTEXITCODE -eq 0) {
                Write-Output "✓ Application reloaded successfully with pm2 (zero-downtime)"
              } else {
                Write-Output "❌ Reload failed, attempting restart..."
                pm2 restart bun-test-app
                if ($LASTEXITCODE -eq 0) {
                  Write-Output "✓ Application restarted successfully with pm2"
                } else {
                  Write-Output "❌ Restart failed, performing fresh start..."
                  pm2 delete bun-test-app 2>$null
                  if ($env:BUN_AVAILABLE -eq "true") {
                    # PM2サービス環境でのBun実行テスト
                    Write-Output "Testing Bun interpreter in PM2 service environment..."
                    try {
                      $bunPath = Get-Command bun -ErrorAction Stop
                      Write-Output "Found Bun at: $($bunPath.Source)"
                      pm2 start ecosystem.config.cjs --interpreter "$($bunPath.Source)"
                    } catch {
                      Write-Output "❌ Bun interpreter test failed, falling back to Node.js..."
                      pm2 start $absoluteIndexPath --name "bun-test-app" --interpreter node
                    }
                  } else {
                    pm2 start $absoluteIndexPath --name "bun-test-app" --interpreter node
                  }
                }
              }
            } else {
              Write-Output "No existing process found. Starting new process..."
              # 環境変数をPM2に渡す
              if ($env:BUN_AVAILABLE -eq "true") {
                Write-Output "Starting with Bun interpreter..."
                pm2 start $absoluteIndexPath --name "bun-test-app" --interpreter bun --env PORT=3000 -f
              } else {
                Write-Output "Starting with Node.js interpreter..."
                # Node.js用のビルドが必要な場合のための対応
                Write-Output "Rebuilding for Node.js target..."
                if (Test-Path "dist") {
                  Remove-Item "dist" -Recurse -Force
                }
                bun build src/index.ts --outdir=dist --target=node --format=esm
                pm2 start $absoluteIndexPath --name "bun-test-app" --interpreter node --env PORT=3000 -f
              }
            }
            
            # 最終状態確認
            if ($LASTEXITCODE -eq 0) {
              Write-Output "✓ Application deployment completed successfully"
              pm2 save
              pm2 list
              Write-Output "Recent logs (last 10 lines):"
              pm2 logs bun-test-app --lines 10 --nostream
              Write-Output "Application is running in background. Workflow completed."
            } else {
              Write-Output "❌ Failed to deploy application with pm2, exit code: $LASTEXITCODE"
              Write-Output "PM2 status:"
              pm2 list
            }
          } else {
            Write-Output "❌ dist/index.js not found, cannot deploy application"
          }
        shell: powershell
        
      - name: Final status check
        run: |
          Write-Output "=== Final Deployment Status ==="
          pm2 list
          Write-Output "=== PM2 Process Details ==="
          pm2 show bun-test-app
          Write-Output "=== Recent Error Logs ==="
          pm2 logs bun-test-app --err --lines 10 --nostream
          Write-Output "=== Recent Output Logs ==="
          pm2 logs bun-test-app --out --lines 10 --nostream
          Write-Output "=== Network Check ==="
          netstat -an | findstr :3000              Write-Output "=== Application Health Check ==="
              Start-Sleep -Seconds 5
              try {
                $response = Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 10 -UseBasicParsing
                Write-Output "✓ Application is responding on port 3000"
                Write-Output "Status Code: $($response.StatusCode)"
                Write-Output "Response: $($response.Content)"
              } catch {
                Write-Output "⚠️ Application health check failed: $_"
                Write-Output "This may be due to PM2 service limitations with Bun integration"
                Write-Output "Checking if port 3000 is in use..."
                Get-NetTCPConnection -LocalPort 3000 -ErrorAction SilentlyContinue | Format-Table
                
                # PM2サービス環境での代替診断
                Write-Output "=== PM2 Service Environment Diagnostics ==="
                $pm2Service = Get-Service -Name "pm2.exe" -ErrorAction SilentlyContinue
                if ($pm2Service) {
                  Write-Output "PM2 Service Status: $($pm2Service.Status)"
                  Write-Output "PM2 Service Start Type: $($pm2Service.StartType)"
                }
                
                # 代替として直接Bunでテスト起動を試行
                if ($env:BUN_AVAILABLE -eq "true") {
                  Write-Output "=== Testing Direct Bun Execution ==="
                  try {
                    Write-Output "Attempting direct Bun execution test..."
                    $bunTestJob = Start-Job -ScriptBlock { 
                      Set-Location $using:PWD
                      $env:PORT = 3001
                      bun run dist/index.js
                    }
                    Start-Sleep -Seconds 3
                    $testResponse = Invoke-WebRequest -Uri "http://localhost:3001" -TimeoutSec 5 -UseBasicParsing -ErrorAction SilentlyContinue
                    if ($testResponse) {
                      Write-Output "✓ Direct Bun execution successful - PM2 service issue confirmed"
                    }
                    Stop-Job $bunTestJob -ErrorAction SilentlyContinue
                    Remove-Job $bunTestJob -ErrorAction SilentlyContinue
                  } catch {
                    Write-Output "Direct Bun test also failed: $_"
                  }
                }
              }
          Write-Output "=== Deployment Complete ==="
        shell: powershell

