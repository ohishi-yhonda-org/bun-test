name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: [self-hosted, Windows, X64,test]
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT || '1433' }}
      DATABASE: ${{ secrets.DATABASE }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Verify Node.js and npm
        run: |
          Write-Output "Node.js version: $(node --version)"
          Write-Output "npm version: $(npm --version)"
        shell: powershell
        
      - name: list files
        run: Get-ChildItem
        shell: powershell
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
        continue-on-error: true
        
      - name: Verify Bun installation
        run: |
          try {
            # Bunが利用可能かテスト
            $bunVersion = bun --version 2>$null
            if ($LASTEXITCODE -eq 0) {
              Write-Output "✓ Bun is available, version: $bunVersion"
              Write-Output "BUN_AVAILABLE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            } else {
              throw "Bun command failed"
            }
          } catch {
            Write-Output "⚠️ Bun not available or failed to execute: $_"
            Write-Output "This may be due to permission issues with symlink creation on self-hosted runner"
            Write-Output "Will use npm for all operations"
            Write-Output "BUN_AVAILABLE=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        shell: powershell
        
      - name: Clean previous installations (if needed)
        run: |
          if (Test-Path "node_modules") {
            Write-Output "Removing existing node_modules..."
            Remove-Item "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "bun.lockb") {
            Write-Output "Removing existing bun.lockb..."
            Remove-Item "bun.lockb" -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "package-lock.json") {
            Write-Output "Removing existing package-lock.json..."
            Remove-Item "package-lock.json" -Force -ErrorAction SilentlyContinue
          }
        shell: powershell
        
      - name: Install dependencies
        run: |
          if ($env:BUN_AVAILABLE -eq "true") {
            Write-Output "Installing dependencies with Bun..."
            try {
              bun install
              if ($LASTEXITCODE -ne 0) {
                throw "Bun install failed with exit code $LASTEXITCODE"
              }
              Write-Output "✓ Dependencies installed successfully with Bun"
            } catch {
              Write-Output "❌ Bun install failed: $_"
              Write-Output "Falling back to npm..."
              npm install --verbose
            }
          } else {
            Write-Output "Installing dependencies with npm..."
            Write-Output "Using npm with --legacy-peer-deps to resolve dependency conflicts..."
            npm install --legacy-peer-deps --verbose
          }
        shell: powershell
        
      - name: Verify environment variables
     
        run: |
          Write-Output "Checking environment variables for Prisma..."
          if ($env:DB_USERNAME) {
            Write-Output "✓ DB_USERNAME is set"
          } else {
            Write-Output "⚠️ DB_USERNAME is not set"
          }
          if ($env:DB_HOST) {
            Write-Output "✓ DB_HOST is set"
          } else {
            Write-Output "⚠️ DB_HOST is not set"
          }
          if ($env:DATABASE) {
            Write-Output "✓ DATABASE is set"
          } else {
            Write-Output "⚠️ DATABASE is not set"
          }
          if ($env:DATABASE_URL) {
            Write-Output "✓ DATABASE_URL is set"
          } else {
            Write-Output "⚠️ DATABASE_URL is not set"
          }
        shell: powershell
        
      - name: generate Prisma client
        run: |
          # DATABASE_URLが設定されていない場合は動的に生成
          if (-not $env:DATABASE_URL -and $env:DB_USERNAME -and $env:DB_PASSWORD -and $env:DB_HOST -and $env:DATABASE) {
            $encodedDatabase = [System.Web.HttpUtility]::UrlEncode($env:DATABASE)
            $dynamicDatabaseUrl = "sqlserver://$($env:DB_USERNAME):$($env:DB_PASSWORD)@$($env:DB_HOST):$($env:DB_PORT)/$encodedDatabase?schema=dbo"
            Write-Output "Generated DATABASE_URL dynamically"
            $env:DATABASE_URL = $dynamicDatabaseUrl
          }
          
          if ($env:BUN_AVAILABLE -eq "true") {
            Write-Output "Generating Prisma client with Bun..."
            try {
              bun run prisma generate
              if ($LASTEXITCODE -ne 0) {
                throw "Bun prisma generate failed with exit code $LASTEXITCODE"
              }
              Write-Output "✓ Prisma client generated successfully with Bun"
            } catch {
              Write-Output "❌ Bun prisma generate failed: $_"
              Write-Output "Falling back to npm..."
              npx prisma generate
            }
          } else {
            Write-Output "Generating Prisma client with npm..."
            npx prisma generate
          }
        shell: powershell
        
      - name: Build project (if available)
        run: |
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          if ($packageJson.scripts.build) {
            if ($env:BUN_AVAILABLE -eq "true") {
              Write-Output "Building with Bun..."
              try {
                bun run build
                if ($LASTEXITCODE -ne 0) {
                  throw "Bun build failed with exit code $LASTEXITCODE"
                }
                Write-Output "✓ Build completed successfully with Bun"
              } catch {
                Write-Output "❌ Bun build failed: $_"
                Write-Output "Falling back to npm..."
                npm run build
              }
            } else {
              Write-Output "Building with npm..."
              npm run build
            }
          } else {
            Write-Output "No build script found, skipping build"
          }
        shell: powershell 
