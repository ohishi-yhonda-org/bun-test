name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: [self-hosted, Windows, X64]

    steps:
      - uses: actions/checkout@v3
      
      - name: Verify Node.js and npm
        run: |
          Write-Output "Node.js version: $(node --version)"
          Write-Output "npm version: $(npm --version)"
        shell: powershell
        
      - name: list files
        run: Get-ChildItem
        shell: powershell
        
      - name: Install Bun
        run: |
          $bunPath = "C:\Users\Administrator\AppData\Roaming\bun\bin"
          if (-not (Test-Path $bunPath)) {
            Write-Output "Bun not found, installing..."
            try {
              # 固定パスでBunをインストール（PATHに依存しない）
              $bunInstallDir = "C:\bun"
              $bunBinDir = "$bunInstallDir\bin"
              
              # ディレクトリ作成
              New-Item -ItemType Directory -Force -Path $bunBinDir | Out-Null
              
              # Bunの最新バージョンをダウンロード
              $bunUrl = "https://github.com/oven-sh/bun/releases/latest/download/bun-windows-x64.zip"
              $zipPath = "$env:TEMP\bun-download.zip"
              
              Write-Output "Downloading Bun from $bunUrl"
              Invoke-WebRequest -Uri $bunUrl -OutFile $zipPath -UseBasicParsing
              
              # 一時展開ディレクトリ
              $tempExtractDir = "$env:TEMP\bun-extract"
              if (Test-Path $tempExtractDir) {
                Remove-Item $tempExtractDir -Recurse -Force
              }
              New-Item -ItemType Directory -Force -Path $tempExtractDir | Out-Null
              
              # ZIPを展開
              Write-Output "Extracting Bun to $tempExtractDir..."
              Expand-Archive -Path $zipPath -DestinationPath $tempExtractDir -Force
              
              # 実行ファイルを探して正しい場所に移動
              $extractedExe = Get-ChildItem -Path $tempExtractDir -Name "bun.exe" -Recurse | Select-Object -First 1
              if ($extractedExe) {
                $sourceBunPath = Get-ChildItem -Path $tempExtractDir -Filter "bun.exe" -Recurse | Select-Object -First 1
                $targetBun = "$bunBinDir\bun.exe"
                
                Write-Output "Moving $($sourceBunPath.FullName) to $targetBun"
                Copy-Item -Path $sourceBunPath.FullName -Destination $targetBun -Force
                
                Write-Output "Bun installed to $targetBun"
                
                # 環境変数として保存（バージョン確認をスキップ）
                Write-Output "BUN_PATH=$targetBun" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                Write-Output "Bun installation completed successfully"
                
              } else {
                throw "Bun executable not found after extraction in $tempExtractDir"
              }
              
              # 一時ファイル削除
              Remove-Item $zipPath -Force -ErrorAction SilentlyContinue
              Remove-Item $tempExtractDir -Recurse -Force -ErrorAction SilentlyContinue
              
            } catch {
              Write-Output "Failed to install Bun: $_"
              Write-Output "Continuing with npm..."
              Write-Output "BUN_PATH=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            }
          } else {
            Write-Output "Bun is already installed."
            if (Test-Path "$bunPath\bun.exe") {
              Write-Output "Using existing Bun installation"
              Write-Output "BUN_PATH=$bunPath\bun.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            }
          }
        shell: powershell
        
      - name: Verify Bun installation
        run: |
          if ($env:BUN_PATH -and (Test-Path $env:BUN_PATH)) {
            Write-Output "✓ Bun is available at: $env:BUN_PATH"
            Write-Output "File size: $((Get-Item $env:BUN_PATH).Length) bytes"
          } else {
            Write-Output "⚠️ Bun not available, will use npm"
          }
        shell: powershell
        
      - name: Install dependencies
        run: |
          if ($env:BUN_PATH -and (Test-Path $env:BUN_PATH)) {
            Write-Output "Installing dependencies with Bun at: $env:BUN_PATH"
            & $env:BUN_PATH install
          } else {
            Write-Output "Installing dependencies with npm..."
            npm install
          }
        shell: powershell
        
      - name: generate Prisma client
        run: |
          if ($env:BUN_PATH -and (Test-Path $env:BUN_PATH)) {
            Write-Output "Generating Prisma client with Bun at: $env:BUN_PATH"
            & $env:BUN_PATH run prisma generate
          } else {
            Write-Output "Generating Prisma client with npm..."
            npx prisma generate
          }
        shell: powershell
        
      - name: Build project (if available)
        run: |
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          if ($packageJson.scripts.build) {
            if ($env:BUN_PATH -and (Test-Path $env:BUN_PATH)) {
              Write-Output "Building with Bun at: $env:BUN_PATH"
              & $env:BUN_PATH run build
            } else {
              Write-Output "Building with npm..."
              npm run build
            }
          } else {
            Write-Output "No build script found, skipping build"
          }
        shell: powershell 
